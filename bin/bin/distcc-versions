#!/bin/bash

declare -a distcc_hosts distcc_output

techo() { [[ -t 1 ]] && echo "$@"; }

#
# Collect DISTCC_HOSTS into a sorted array
#
[[ -z $DISTCC_HOSTS ]] && \
    DISTCC_HOSTS=$(distcc-config --get-hosts 2>/dev/null | grep -v '^No configuration file' \
    || cat ~/.distcc/hosts 2>/dev/null || cat /etc/distcc/hosts 2>/dev/null)
distcc_hosts=( $(for x in $DISTCC_HOSTS; do echo "$x"; done | sort -u) )
if [[ ${#distcc_hosts[@]} -eq 0 ]]; then
    echo "Sorry, DISTCC_HOSTS is not set, ~/.distcc/hosts and /etc/distcc/hosts are empty" >&2
    exit 1
fi
distcc_versions=()

#
# Create a temporary C program.  This C program is necessary so that distcc will
# batch out the compile.
#
tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX) || exit 1
trap "rm -rf $tmpdir" 0 1 2 15
cd $tmpdir || exit 1
echo "main() { ; }" >prog.c || exit 1

# 
# Call the compiler on each machine to collect version numbers
#
for ((i = 0; i < ${#distcc_hosts[@]}; i++)); do
    x=${distcc_hosts[i]}
    techo -n "$x"

    output=$(DISTCC_LOG= DISTCC_VERBOSE=1 DISTCC_FALLBACK=0 DISTCC_HOSTS=$x \
        distcc --verbose -c prog.c 2>&1)

    if [[ $output != *"compile prog.c on $x completed ok"* ]]; then
        distcc_versions[i]="failed"
    else
        distcc_versions[i]=$(grep '^gcc version' <<<"$output" | tail -n1)
    fi

    techo -ne '\015\033[K'
done

# 
# Display the version list
#
for ((i = 0; i < ${#distcc_hosts[@]}; i++)); do
    x=${distcc_hosts[i]}

    # Change localhost to HOSTNAME for readability
    if [[ $x == localhost ]]; then
        if [[ ${distcc_hosts[*]} == *.* ]]; then
            x=$HOSTNAME
        else
            x=${HOSTNAME%%.*}
        fi
    fi

    printf "%-20s %s\n" "$x" "${distcc_versions[i]}"
done
