#!/usr/bin/env bash
#
# Copyright 2004,2009 Aron Griffis <agriffis@n01se net>
# Released under the GNU GPL v3
#
# fsusage: check filesystem usage and issue a warning if necessary
# 

PATH=/usr/bin:/bin:/usr/sbin:/sbin

main() {
    declare opt_all=false
    declare opt_state=rw
    declare opt_statedir=$HOME/.fsusage
    declare opt_red=98
    declare opt_yellow=90
    declare opt_syslog=false
    declare shortopts=( a:all r:red y:yellow )
    declare -a opts params
    ghettopt "$@" || exit
    set -- "${params[@]}"

    if $opt_syslog; then
        if ! type -P logger &>/dev/null; then
            die "logger required for --syslog"
        else
            exec > >(logger -p local0.alert -t fsusage)
        fi
    fi

    declare rs ws
    [[ $opt_state == *r* ]] && rs=true || rs=false
    [[ $opt_state == *w* ]] && ws=true || ws=false
    $opt_all && rs=false
    $ws && { mkdir -p "$opt_statedir" || die; }

    check "$@"
}

opt_help() {
    cat <<EOT
usage: fsusage [options] [filesystems]

    -a  --all           Show all filesystems including GREEN
    -r  --red PCT       Percentage to warn RED ($opt_red)
    -y  --yellow PCT    Percentage to warn YELLOW ($opt_yellow)
        --state RW      RW=r to read state files,
                        RW=w to write state files,
                        RW=rw for both, RW="" for neither
        --statedir DIR  State directory ($opt_statedir)
        --syslog        Output to syslog instead of stdout
EOT
}

die() {
    [[ -n $* ]] && echo "${0##*/}: $*" >&2
    exit 1
}

# utility, depends on vars declared in check()
report() {
    case $1 in
        GREEN)
            echo "info: $mnt is $1 at $pct% ($used of $total used)"
            $ws && rm -f "$statefile" ;;
        *)
            echo "warning: $mnt is $1 at $pct% ($used of $total used)"
            $ws && echo $pct > "$statefile" ;;
    esac
}

check() {
    declare fs total used foo pct mnt statefile t

    if [[ $# -ne 0 ]]; then
        df -hP "$@" | tail -n +2
    else
        df -lhPx iso9660 | grep '^/' # local filesystems only
    fi | \
    while read fs total used foo pct mnt foo; do
        pct=${pct%\%}
        statefile=$opt_statedir/usage${fs//\//_}

        if [[ $pct -ge $opt_red ]]; then
            report RED

        elif [[ $pct -ge $opt_yellow ]]; then
            if [[ $rs == false || ! -r $statefile ]]; then
                report YELLOW
            elif [[ $pct -gt $(<$statefile) ]]; then
                report YELLOW
            else
                t=$(mktemp)
                touch -d '1 day ago' "$t"
                if [[ $statefile -ot $t ]]; then
                    report YELLOW
                fi
                rm -f "$t"
            fi

        else
            if $opt_all; then
                report GREEN
            elif [[ $rs == true && -r $statefile && \
                    $(<$statefile) -ge $opt_yellow ]]; then
                report GREEN
            fi
        fi
    done
}

ghettopt() {
  # ghettopt, simple command-line processing in pure Bash.
  # version 1.0
  # Copyright 2008, 2012 Aron Griffis <aron@arongriffis.com>
  # Released under the Mozilla Public License 2.0

  _ghettopt_main() {
    declare -a longs shorts
    declare go_long go_short i o v

    # Extract long options from variable declarations.
    for o in $(compgen -A variable opt_); do
      v=${!o}; o=${o#opt_}; o=${o//_/-}
      if [[ $v == false || $v == true ]]; then
        longs=( "${longs[@]}" ${o//_/-} no-${o//_/-} )
      else
        longs=( "${longs[@]}" ${o//_/-}: )
      fi
    done

    # Extract long options from function declarations.
    # These are allowed to have colons on the end.
    for o in $(compgen -A function opt_); do
      longs=( "${longs[@]}" "${o#opt_}" )
    done

    # Make it a comma-separated list.
    go_long="${longs[*]}"
    go_long="${go_long// /,}"

    # Extract short options from $shortopts, add takes-a-value colon.
    if [[ -n $shortopts ]]; then
      shorts=( "${shortopts[@]%%:*}" )
      for ((i=0; i<${#shortopts[@]}; i++)); do
        o=${shortopts[i]#?:}
        if [[ ,$go_long, == *,"$o":,* ]]; then
          shorts[i]=${shorts[i]}:
        fi
      done
    fi

    # Make it a simple string.
    go_short="${shorts[*]}"
    go_short="${go_short// /}"

    # Call getopt!
    declare args
    args=$(getopt -o "$go_short" --long "$go_long" -n "$0" -- "$@") || return
    eval set -- "$args"

    # Figure out what getopt returned...
    declare opt var val
    parsed_opts=()
    while true; do
      [[ $1 != -- ]] || { shift; break; }

      # Translate short options to long.
      if [[ $1 == -? ]]; then
        opt=${1#-}
        for x in "${shortopts[@]}"; do
          if [[ $x == "$opt":* ]]; then
            opt=${x##*:}
            break
          fi
        done
      else
        opt=${1#--}
      fi

      # Figure out $var and $val; shift positional params.
      var=opt_${opt//-/_}
      case ,"$go_long", in
        # Make sure to handle opt_no_something (--no-something)
        # which has a (silly) negation of --no-no-something
        (*,"no-$opt",*)
          val=true
          parsed_opts=( "${parsed_opts[@]}" "$1" )
          shift ;;
        (*,"$opt",*)
          if [[ $opt == no-* ]]; then
            var=${var/no_/}
            val=false
          else
            val=true
          fi
          parsed_opts=( "${parsed_opts[@]}" "$1" )
          shift ;;
        (*,"$opt:",*) 
          val=$2
          parsed_opts=( "${parsed_opts[@]}" "$1" "$2" )
          shift 2 ;;
        (*)
          echo "error processing $1: not in \$go_long?" >&2
          return 1 ;;
      esac

      if _ghettopt_is_function "$var"; then
        $var
      elif _ghettopt_is_function "$var:"; then
        $var: "$val"
      elif _ghettopt_is_array "$var"; then
        eval "$var=( \"\${$var[@]}\" \"\$val\" )"
      elif _ghettopt_is_var "$var"; then
        eval "$var=\$val"
      else
        echo "error processing $var: no func/array/var?" >&2
        return 1
      fi
    done

    params=( "$@" )
  }

  _ghettopt_is_function() {
    [[ $(type -t "$1") == function ]]
  }

  _ghettopt_is_array() {
    set -- $(declare -p "$1" 2>/dev/null)
    [[ $2 == -*a* ]]
  }

  _ghettopt_is_var() {
    declare -p "$1" &>/dev/null
  }

  _ghettopt_version_check() {
    if [[ -z $BASH_VERSION ]]; then
      echo "ghettopt: unknown version of bash might not be compatible" >&2
      return 1
    fi

    # This is a lexical comparison that should be sufficient forever.
    if [[ $BASH_VERSION < 2.05b ]]; then
      echo "ghettopt: bash $BASH_VERSION might not be compatible" >&2
      return 1
    fi

    return 0
  }

  _ghettopt_version_check
  _ghettopt_main "$@"
  declare status=$?
  unset -f _ghettopt_main _ghettopt_version_check \
    _ghettopt_is_function _ghettopt_is_array _ghettopt_is_var
  return $status
}

getopt() {
  # pure-getopt, a drop-in replacement for GNU getopt in pure Bash.
  # version 1.5.1
  #
  # Copyright 2012 Aron Griffis <aron@arongriffis.com>
  # Released under the Mozilla Public License 2.0

  _getopt_main() {
    # Returns one of the following statuses:
    #   0 success
    #   1 error parsing parameters
    #   2 error in getopt invocation
    #   3 internal error
    #   4 reserved for -T
    #
    # For statuses 0 and 1, generates normalized and shell-quoted
    # "options -- parameters" on stdout.

    declare parsed status
    declare short long name flags
    declare have_short=false

    # Synopsis from getopt man-page:
    #
    #   getopt optstring parameters
    #   getopt [options] [--] optstring parameters
    #   getopt [options] -o|--options optstring [options] [--] parameters
    #
    # The first form can be normalized to the third form which
    # _getopt_parse() understands. The second form can be recognized after
    # first parse when $short hasn't been set.

    if [[ -n ${GETOPT_COMPATIBLE+isset} || $1 == [^-]* ]]; then
      # Enable compatibility mode
      flags=c$flags
      # Normalize first to third synopsis form
      set -- -o "$1" -- "${@:2}"
    fi

    # First parse always uses flags=p since getopt always parses its own
    # arguments effectively in this mode.
    parsed=$(_getopt_parse getopt ahl:n:o:qQs:TuV \
      alternative,help,longoptions:,name,options:,quiet,quiet-output,shell:,test,version \
      p "$@")
    status=$?
    if [[ $status != 0 ]]; then
      if [[ $status == 1 ]]; then
        echo "Try \`getopt --help' for more information." >&2
        # Since this is the first parse, convert status 1 to 2
        status=2
      fi
      return $status
    fi
    eval "set -- $parsed"

    while [[ $# -gt 0 ]]; do
      case $1 in
        (-a|--alternative)
          flags=a$flags ;;

        (-h|--help)
          _getopt_help
          return 2  # as does GNU getopt
          ;; 

        (-l|--longoptions)
          long="$long${long:+,}$2"
          shift ;;

        (-n|--name)
          name=$2
          shift ;;

        (-o|--options)
          short=$2
          have_short=true
          shift ;;

        (-q|--quiet)
          flags=q$flags ;;

        (-Q|--quiet-output)
          flags=Q$flags ;;

        (-s|--shell)
          case $2 in
            (sh|bash)
              flags=${flags//t/} ;;
            (csh|tcsh)
              flags=t$flags ;;
            (*)
              echo 'getopt: unknown shell after -s or --shell argument' >&2
              echo "Try \`getopt --help' for more information." >&2
              return 2 ;;
          esac
          shift ;;

        (-u|--unquoted)
          flags=u$flags ;;

        (-T|--test)
          return 4 ;;

        (-V|--version)
          echo "pure-getopt 1.5.1"
          return 0 ;;

        (--)
          shift
          break ;;
      esac

      shift
    done

    if ! $have_short; then
      # $short was declared but never set, not even to an empty string.
      # This implies the second form in the synopsis.
      if [[ $# == 0 ]]; then
        echo 'getopt: missing optstring argument' >&2
        echo "Try \`getopt --help' for more information." >&2
        return 2
      fi
      short=$1
      have_short=true
      shift
    fi

    if [[ $short == -* ]]; then
      # Leading dash means generate output in place rather than reordering,
      # unless we're already in compatibility mode.
      [[ $flags == *c* ]] || flags=i$flags
      short=${short#?}
    elif [[ $short == +* ]]; then
      # Leading plus means POSIXLY_CORRECT, unless we're already in
      # compatibility mode.
      [[ $flags == *c* ]] || flags=p$flags
      short=${short#?}
    fi

    # This should fire if POSIXLY_CORRECT is in the environment, even if
    # it's an empty string.  That's the difference between :+ and +
    flags=${POSIXLY_CORRECT+p}$flags

    _getopt_parse "${name:-getopt}" "$short" "$long" "$flags" "$@"
  }

  _getopt_parse() {
    # Inner getopt parser, used for both first parse and second parse.
    # Returns 0 for success, 1 for error parsing, 3 for internal error.
    # In the case of status 1, still generates stdout with whatever could
    # be parsed.
    #
    # $flags is a string of characters with the following meanings:
    #   a - alternative parsing mode
    #   c - GETOPT_COMPATIBLE
    #   i - generate output in place rather than reordering
    #   p - POSIXLY_CORRECT
    #   q - disable error reporting
    #   Q - disable normal output
    #   t - quote for csh/tcsh
    #   u - unquoted output

    declare name="$1" short="$2" long="$3" flags="$4"
    shift 4

    # Split $long on commas, prepend double-dashes, strip colons;
    # for use with _getopt_resolve_abbrev
    declare -a longarr
    _getopt_split longarr "$long"
    longarr=( "${longarr[@]/#/--}" )
    longarr=( "${longarr[@]%:}" )
    longarr=( "${longarr[@]%:}" )

    # Parse and collect options and parameters
    declare -a opts params
    declare o alt_recycled=false error=0

    while [[ $# -gt 0 ]]; do
      case $1 in
        (--)
          params=( "${params[@]}" "${@:2}" )
          break ;;

        (--*=*)
          o=${1%%=*}
          if ! o=$(_getopt_resolve_abbrev "$o" "${longarr[@]}"); then
            error=1
          elif [[ ,$long, == *,"${o#--}"::,* ]]; then
            opts=( "${opts[@]}" "$o" "${1#*=}" )
          elif [[ ,$long, == *,"${o#--}":,* ]]; then
            opts=( "${opts[@]}" "$o" "${1#*=}" )
          elif [[ ,$long, == *,"${o#--}",* ]]; then
            if $alt_recycled; then
              # GNU getopt isn't self-consistent about whether it reports
              # errors with a single dash or double dash in alternative
              # mode, but in this case it reports with a single dash.
              _getopt_err "$name: option '${o#-}' doesn't allow an argument"
            else
              _getopt_err "$name: option '$o' doesn't allow an argument"
            fi
            error=1
          else
            echo "getopt: assertion failed (1)" >&2
            return 3
          fi
          alt_recycled=false
          ;;

        (--?*)
          o=$1
          if ! o=$(_getopt_resolve_abbrev "$o" "${longarr[@]}"); then
            error=1
          elif [[ ,$long, == *,"${o#--}",* ]]; then
            opts=( "${opts[@]}" "$o" )
          elif [[ ,$long, == *,"${o#--}::",* ]]; then
            opts=( "${opts[@]}" "$o" '' )
          elif [[ ,$long, == *,"${o#--}:",* ]]; then
            if [[ $# -ge 2 ]]; then
              shift
              opts=( "${opts[@]}" "$o" "$1" )
            else
              _getopt_err "$name: option '$o' requires an argument"
              error=1
            fi
          else
            echo "getopt: assertion failed (2)" >&2
            return 3
          fi
          alt_recycled=false
          ;;

        (-*)
          if [[ $flags == *a* ]]; then
            # Alternative parsing mode!
            # Try to handle as a long option if any of the following apply:
            #  1. There's an equals sign in the mix -x=3 or -xy=3
            #  2. There's 2+ letters and an abbreviated long match -xy
            #  3. There's a single letter and an exact long match
            #  4. There's a single letter and no short match
            o=${1::2} # temp for testing #4
            if [[ $1 == *=* || $1 == -?? || \
                  ,$long, == *,"${1#-}"[:,]* || \
                  ,$short, != *,"${o#-}"[:,]* ]]; then
              o=$(_getopt_resolve_abbrev "${1%%=*}" "${longarr[@]}" 2>/dev/null)
              case $? in
                (0)
                  # Unambiguous match. Let the long options parser handle
                  # it, with a flag to get the right error message.
                  set -- "-$@"
                  alt_recycled=true
                  continue ;;
                (1)
                  # Ambiguous match, generate error and continue.
                  _getopt_resolve_abbrev "${1%%=*}" "${longarr[@]}" >/dev/null
                  error=1
                  shift
                  continue ;;
                (2)
                  # No match, fall through to single-character check.
                  true ;;
                (*)
                  echo "getopt: assertion failed (3)" >&2
                  return 3 ;;
              esac
            fi
          fi

          o=${1::2}
          if [[ $short == *"${o#-}"::* ]]; then
            if [[ ${#1} -gt 2 ]]; then
              opts=( "${opts[@]}" "$o" "${1:2}" )
            else
              opts=( "${opts[@]}" "$o" '' )
            fi
          elif [[ $short == *"${o#-}":* ]]; then
            if [[ ${#1} -gt 2 ]]; then
              opts=( "${opts[@]}" "$o" "${1:2}" )
            elif [[ $# -ge 2 ]]; then
              shift
              opts=( "${opts[@]}" "$o" "$1" )
            else
              _getopt_err "$name: option requires an argument -- '${o#-}'"
              error=1
            fi
          elif [[ $short == *"${o#-}"* ]]; then
            opts=( "${opts[@]}" "$o" )
            if [[ ${#1} -gt 2 ]]; then
              set -- "$o" "-${1:2}" "${@:2}"
            fi
          else
            if [[ $flags == *a* ]]; then
              # Alternative parsing mode! Report on the entire failed
              # option. GNU includes =value but we omit it for sanity with
              # very long values.
              _getopt_err "$name: unrecognized option '${1%%=*}'"
            else
              _getopt_err "$name: invalid option -- '${o#-}'"
              if [[ ${#1} -gt 2 ]]; then
                set -- "$o" "-${1:2}" "${@:2}"
              fi
            fi
            error=1
          fi ;;

        (*)
          # GNU getopt in-place mode (leading dash on short options)
          # overrides POSIXLY_CORRECT
          if [[ $flags == *i* ]]; then
            opts=( "${opts[@]}" "$1" )
          elif [[ $flags == *p* ]]; then
            params=( "${params[@]}" "$@" )
            break
          else
            params=( "${params[@]}" "$1" )
          fi
      esac

      shift
    done

    if [[ $flags == *Q* ]]; then
      true  # generate no output
    else
      echo -n ' '
      if [[ $flags == *[cu]* ]]; then
        printf '%s -- %s' "${opts[*]}" "${params[*]}"
      else
        if [[ $flags == *t* ]]; then
          _getopt_quote_csh "${opts[@]}" -- "${params[@]}"
        else
          _getopt_quote "${opts[@]}" -- "${params[@]}"
        fi
      fi
      echo
    fi

    return $error
  }

  _getopt_err() {
    if [[ $flags != *q* ]]; then
      printf '%s\n' "$1" >&2
    fi
  }

  _getopt_resolve_abbrev() {
    # Resolves an abbrevation from a list of possibilities.
    # If the abbreviation is unambiguous, echoes the expansion on stdout
    # and returns 0.  If the abbreviation is ambiguous, prints a message on
    # stderr and returns 1. (For first parse this should convert to exit
    # status 2.)  If there is no match at all, prints a message on stderr
    # and returns 2.
    declare a q="$1"
    declare -a matches
    shift
    for a; do
      if [[ $q == "$a" ]]; then
        # Exact match. Squash any other partial matches.
        matches=( "$a" )
        break
      elif [[ $flags == *a* && $q == -[^-]* && $a == -"$q" ]]; then
        # Exact alternative match. Squash any other partial matches.
        matches=( "$a" )
        break
      elif [[ $a == "$q"* ]]; then
        # Abbreviated match.
        matches=( "${matches[@]}" "$a" )
      elif [[ $flags == *a* && $q == -[^-]* && $a == -"$q"* ]]; then
        # Abbreviated alternative match.
        matches=( "${matches[@]}" "$a" )
      fi
    done
    case ${#matches[@]} in
      (0)
        [[ $flags == *q* ]] || \
        printf "$name: unrecognized option %s\n" >&2 \
          "$(_getopt_quote "$q")"
        return 2 ;;
      (1)
        printf '%s' "$matches"; return 0 ;;
      (*) 
        [[ $flags == *q* ]] || \
        printf "$name: option %s is ambiguous; possibilities: %s\n" >&2 \
          "$(_getopt_quote "$q")" "$(_getopt_quote "${matches[@]}")"
        return 1 ;;
    esac
  }

  _getopt_split() {
    # Splits $2 at commas to build array specified by $1
    declare IFS=,
    eval "$1=( \$2 )"
  }

  _getopt_quote() {
    # Quotes arguments with single quotes, escaping inner single quotes
    declare s space q=\'
    for s; do
      printf "$space'%s'" "${s//$q/$q\\$q$q}"
      space=' '
    done
  }

  _getopt_quote_csh() {
    # Quotes arguments with single quotes, escaping inner single quotes,
    # bangs, backslashes and newlines
    declare s i c space
    for s; do
      echo -n "$space'"
      for ((i=0; i<${#s}; i++)); do
        c=${s:i:1}
        case $c in
          (\\|\'|!)
            echo -n "'\\$c'" ;;
          ($'\n')
            echo -n "\\$c" ;;
          (*)
            echo -n "$c" ;;
        esac
      done
      echo -n \'
      space=' '
    done
  }

  _getopt_help() {
    cat <<-EOT >&2
	
	Usage:
	 getopt optstring parameters
	 getopt [options] [--] optstring parameters
	 getopt [options] -o|--options optstring [options] [--] parameters
	
	Options:
	 -a, --alternative            Allow long options starting with single -
	 -h, --help                   This small usage guide
	 -l, --longoptions <longopts> Long options to be recognized
	 -n, --name <progname>        The name under which errors are reported
	 -o, --options <optstring>    Short options to be recognized
	 -q, --quiet                  Disable error reporting by getopt(3)
	 -Q, --quiet-output           No normal output
	 -s, --shell <shell>          Set shell quoting conventions
	 -T, --test                   Test for getopt(1) version
	 -u, --unquote                Do not quote the output
	 -V, --version                Output version information
	
	EOT
  }

  _getopt_version_check() {
    if [[ -z $BASH_VERSION ]]; then
      echo "getopt: unknown version of bash might not be compatible" >&2
      return 1
    fi

    # This is a lexical comparison that should be sufficient forever.
    if [[ $BASH_VERSION < 2.05b ]]; then
      echo "getopt: bash $BASH_VERSION might not be compatible" >&2
      return 1
    fi

    return 0
  }

  _getopt_version_check
  _getopt_main "$@"
  declare status=$?
  unset -f _getopt_main _getopt_err _getopt_parse _getopt_quote \
    _getopt_quote_csh _getopt_resolve_abbrev _getopt_split _getopt_help \
    _getopt_version_check
  return $status
}

main "$@"
