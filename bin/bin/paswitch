#!/usr/bin/env python2

import itertools
from subprocess import check_output, check_call
import operator
import time

def get_cards():
    pacmd = check_output(['pacmd', 'list-cards'])

    cards = {}
    c = None
    in_profiles = False

    for line in pacmd.splitlines():
        line = line.strip()
        if not line:
            continue

        spans = line.split()

        if spans[0] == 'name:':
            c = spans[1][1:-1]
            cards[c] = {}
            continue

        if spans[0] == 'profiles:':
            cards[c]['profiles'] = {}
            in_profiles = True
            continue

        if line.startswith('active profile:'):
            cards[c]['active'] = spans[2][1:-1]
            in_profiles = False
            continue

        if in_profiles:
            name = spans[0][:-1]
            prio = int(spans[-1][:-1])
            cards[c]['profiles'][name] = prio

    return cards


def get_sinks():
    pacmd = check_output(['pacmd', 'list-sinks'])

    sinks = []

    for line in pacmd.splitlines():
        line = line.strip()
        if not line:
            continue

        spans = line.split()

        if spans[0] == '*' and spans[1] == 'index:':
            sinks.append(spans[2])

    return sinks


def get_sources():
    pacmd = check_output(['pacmd', 'list-sources'])

    sources = []

    for line in pacmd.splitlines():
        line = line.strip()
        if not line:
            continue

        spans = line.split()

        if spans[0] == '*' and spans[1] == 'index:':
            index = spans[2]
            continue

        if spans[0] == 'name:' and not spans[1].endswith('monitor>'):
            sources.append(index)

    return sources


def set_profile(name, profile):
    check_call(['pacmd', 'set-card-profile', name, profile])


def set_default_sink(name, sink):
    check_call(['pacmd', 'set-default-sink', sink])


def set_default_source(name, source):
    check_call(['pacmd', 'set-default-source', source])


def partition(items, predicate=bool):
    a, b = itertools.tee((predicate(item), item) for item in items)
    return ((item for pred, item in a if not pred),
            (item for pred, item in b if pred))


if __name__ == '__main__':
    import sys

    cards = get_cards()
    sinks = get_sinks()
    sources = get_sources()

    patt = sys.argv[1].lower()
    inactive, active = partition(cards,
        lambda c: patt in c.lower())

    active = list(active)
    assert len(active) == 1

    get_active_profile = lambda x: sorted(cards[x]['profiles'].items(),
        key=operator.itemgetter(1))[-1][0]

    for x in active:
        set_profile(x, get_active_profile(x))

    new_sinks = set(get_sinks()) - set(sinks)
    print new_sinks
    assert len(new_sinks) == 1
    set_default_sink(new_sinks[0])

    new_sources = set(get_sources()) - set(sources)
    print new_sources
    assert len(new_sources) == 1
    set_default_source(new_sources[0])

    for x in inactive:
        set_profile(x, 'off')
