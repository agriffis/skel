#!/usr/bin/env bash

set -x

main() {
  if [[ $1 == --remote ]]; then
    remote "${@:2}"
    exit
  fi

  ensure-ssh-identity "$@"

  declare host
  host=${1:-junco}-tunnel
  shift

  while true; do (
    declare -a forwards vars
    cleanup() {
      trap - 0 2
      echo 'pausing before retry, press ctrl-c to quit'
      for ((i = 5; i; i--)); do echo -n "$i "; sleep 1; done
      echo retrying
      exit 0 # so that we'll loop
    }
    prepend_cleanup() { eval "cleanup() { $*; $(type cleanup | tail -n +4)"; }
    trap cleanup 0 2

    if [[ $HOSTNAME. == penguin.* ]]; then
      forwards+=( -o 'GatewayPorts yes' )
    fi

    declare waypipe_sock
    if [[ -n $WAYLAND_DISPLAY ]] && which waypipe &>/dev/null; then
      waypipe_sock=$(mktemp -u /tmp/waypipe.XXXXXX)
      waypipe -c lz4 -s $waypipe_sock client &
      declare waypipe_pid=$!
      forwards+=( -R $waypipe_sock:$waypipe_sock )
      vars+=( WAYPIPE_SOCK="$waypipe_sock" )
      prepend_cleanup 'kill $waypipe_pid; rm -f $waypipe_sock; wait $waypipe_pid'
    fi

    declare remote_dbus_session_bus_address
    if [[ $DBUS_SESSION_BUS_ADDRESS == unix:path=/* ]]; then
      remote_dbus_session_bus_address=/tmp/dbus-session-${HOSTNAME%%.*}-$EPOCHSECONDS
      forwards+=( -R $remote_dbus_session_bus_address:${DBUS_SESSION_BUS_ADDRESS#unix:path=} )
      vars+=( DBUS_SESSION_BUS_ADDRESS="unix:path=$remote_dbus_session_bus_address" )
    fi

    case $host in
      (junco-tunnel) vars+=( TMUX_SESSION=scampersand ) ;;
      (jx-tunnel) vars+=( TMUX_SESSION=jx ) ;;
    esac

    ssh -t -Y "${forwards[@]}" "$host" "tunnel --remote $(printf '%q ' ${vars[@]})"
  ) || break; done

  exit # always exit at bottom of main
}

ensure-ssh-identity() {
  ssh-add -l &>/dev/null
  case $? in
    2)
      # wrap and restart
      exec ssh-agent "$(type -P "$0")" "$@"
      ;;
    0)
      # we have identities, carry on
      ;;
    *)
      # add identity to running ssh-agent
      ssh-add || exit
      ;;
  esac
}

remote() {
  if [[ $1 == *=* ]]; then
    export "$@"
  fi

  if [[ -e $WAYPIPE_SOCK ]] && which waypipe &>/dev/null && [[ ! -n $WAYLAND_DISPLAY ]]; then
    exec waypipe -c lz4 -s "$WAYPIPE_SOCK" server -- env -u WAYPIPE_SOCK tunnel --remote
    return
  fi

  if [[ -n $TMUX_SESSION ]]; then
    # The new-session/detach here allows update-environment to apply the new
    # setting of DISPLAY. Source .ssh/agent first to avoid overriding agent
    # vars in tmux session.
    (source .ssh/agent; tmux new-session -As $TMUX_SESSION \; detach)
  fi

  # Don't use ssh -N because it prevents ForwardX11.
  # Just sleep for 100 years.
  sleep 36500d
}

main "$@"
